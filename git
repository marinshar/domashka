<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Основы Git</title>
    <link rel="stylesheet" href="git.css">
</head>
<body>
<p>Перед вами небольшая статья-шпаргалка, которая включает в себя удобные, но не всем знакомые команды Git, которые могут стать вашими постоянными спутниками в разработке.<br></p>1. <b class="red">git init</b><br><article id="news-body" itemprop="articleBody" style="display: inline !important;"><p>            Эта команда используется для инициализации проекта как репозитория git.</p><p>            2. <b class="red">git clone</b></p><p>            Эта команда клонирует репозиторий в новую директорию.</p><p><code> git config</code> — это удобная функция, которая используется для настройки значений конфигурации Git на глобальном и локальном уровнях проекта. Примеры команд:</p><p><code> git config --local user.name "Name"</code></p><p><code>git config --local user.email "<a href="mailto:your_email@example.com">your_email@example.com</a>"</code></p><p><code> git config --global user.name "Name"</code></p><p><code> git config --global user.email "<a href="mailto:your_email@example.com">your_email@example.com</a>"</code></p><p>        Если надо скопировать только файлы:</p><p>git clone --depth=1 git://someserver/somerepo dirformynewrepo</p><p>rm -rf !$/.git</p><p>            3. <b class="red" style="">git remote add</b></p><p>            Пример: <code>git remote add origin </code></p><p><code>            href="https://github.com/MrKrishnaAgarwal/Git-CheatSheet.git?roistat_visit=2927050"&gt;https://github.com/MrKrishnaAgarwal/Git-CheatSheet.git</code></p><p>            Эта команда используется для добавления или подключения к удаленному репозиторию.</p><p>            4. <b class="red" style="">git remote -v</b></p><p>            Эта команда используется для просмотра подключенных удаленных репозиториев.</p><p>            5. <b class="red" style="">git status</b></p><p>            Эта команда используется для просмотра статуса файлов в вашем локальном репозитории. Отслеживаются ли файлы? Не отслеживается? Изменены ли они?</p><p>            6. <b class="red" style="">git add </b></p><p>            Пример:<code> git add index.html</code></p><p><code>git add index.html style.css </code>style.scss</p><p>           Эта команда переносит все новые и измененные файлы в раздел проиндексированных файлов</p><p><code> git add -A</code></p><p>            -Эта команда используется для индексирования ВСЕХ неустановленных файлов.</p><p><code>git add</code></p><p>            для конкретного файла</p><p>            7.<b class="red" style=""> git reset</b></p><p>            Эта команда используется для мягкой или жёсткой отмены изменений, позволяет сбросить состояние проекта до нужного коммита. Например. </p><p>            отмена неотправленного коммита: <code>git reset --hard HEAD^</code></p><p>            отмена отправленного коммита ( возврат к состояние коммита 7880ae2 )</p><p><code>git reset --hard f7880ae2 </code></p><p><code>            git push origin -f</code></p><p>            8. <b class="red" style="">git commit</b></p><p>            -Эта команда совершает коммит  — «закрепляет» промежуточные результаты.</p><p><code> git commit -m “Text message”</code></p><p>            Пример: <code>git commit -m "added navigation bar"</code></p><p>            Команда <code>-m</code> позволяет указать commit message без обращения к редактору</p><p><code> git commit --amend</code></p><p>            Команда <code>--amend</code> вносит в предыдущий коммит изменения, которые подготовлены к коммиту. Используется и для редактирования предыдущего commit message, если в нём допущены ошибки.</p><p>            9. <b class="red" style="">git push -u origin</b></p><p>            Ключ <code>-u</code> (полный вариант <code>--set-upstream</code>) создаёт в удалённом репозитории ветку, соответствующую локальной и связывает их.</p><p><code>git push</code></p><p>            Пример: <code>git push -u origin master</code></p><p>            Эта команда используется для отправки закоммиченных файлов в удаленный репозиторий (также известный как GitHub) в указанной ветке. Используйте эту команду, когда вы впервые отправляете файлы в удаленный репозиторий. Он зафиксирует место, куда вы отправляете</p><p>            эти файлы. И в следующий раз можно будет использовать команду git push.</p><p>            10. <b class="red" style="">git fetch</b></p><p>            Эта команда используется для получения самой последней версии вашего локального репозитория. Загружает коммиты, файлы и ссылки из удаленного репозитория в ваш локальный репозиторий.</p><p>            11. <b class="red" style="">git pull </b></p><p>            Эта команда используется для извлечения только что полученной информации и ее загрузки в локальный репозиторий. git pull запускает немедленное обновление локального репозитория.</p><p>            12.<b> git branch </b></p><p>Эта команда используется для создания, просмотра переименования и удаления ветки, на которой вы сейчас находитесь. </p><p><code>git branch -a</code></p><p>            Эта команда используется для предварительного просмотра всех веток в удаленном репозитории.</p><p><code> git branch -r</code></p><p>            Эта команда используется для предварительного просмотра всех веток на сервере.</p><p>            13. <b>git checkout</b></p><p>            Пример: <code>git checkout master</code> или <code>git checkout develop</code></p><p>            Эта команда используется для переключения на ветки, которые вы уже посещали ранее.</p><p><code> git checkout</code></p><p> — ещё один  вариант использования</p><p>            14. <b>git merge</b></p><p>            Эта команда используется для объединения двух веток. Для этого укажите ветку, которую вы хотите унаследовать изменения. И имя ветки, которое вы будете использовать вместе с этой командой, — это ветка, которая предоставит изменения.</p><p>            Пример: <code>git merge develop</code></p><p>            Здесь основная ветка наследует код из ветки разработки.</p><p>            15. <b>git merge — abort</b></p><p>            Эта команда используется для отмены слияния.</p><p>            Если нет ошибок, слияния будут успешными. Следовательно, это прерывание можно использовать только в ситуациях, когда слияние не удалось. Как понять, что нужно использовать эту команду? Ваш терминал скажет, что слияние не удалось. Он также может предложить</p><p>            вам исправить конфликты слияния.</p><p>            Вот ещё один признак: <code>~/NextCloud/Documents/Web Projects/Cloud4Y (master)</code></p><p>            Посмотрите в самый конец строки. В скобках написано (master). Это потому, что мы находимся в основной ветке. Если вы находитесь в ветке разработки, это будет означать (develop). Если смерджить не получилось, появится надпись (master|merging) или что-то</p><p>            в этом роде. </p><p><code>git merge -X theirs</code></p><p>            Пример: <code>git merge -X theirs develop</code></p><p>            Эта команда используется для объединения двух веток. И если есть конфликты слияния, эта команда просто предположит, что вы предпочитаете изменения, сделанные в указанной ветке (а не в текущей).</p><p>            16. <b>git reset — hard HEAD</b></p><p>            Эта команда удалит все изменения, внесенные вами в ваш локальный репозиторий, и обновит его до последней версии, которая была закоммичена на GitHub.</p><p>            17. <b>git reset HEAD^</b></p><p>            -Эта команда перемещает текущую ветку назад на два коммита, эффективно удаляя два снапшота, которые мы только что создали, из истории проекта. Он отменяет случайное закоммичивание и сохраняет изменения.</p><p>            21. <b>git diff</b></p><p><code> git diff</code></p><p> — частое использование </p><p>            Эта команда используется сравнения изменений.</p><p><br></p><p>            22. <b>git rebase</b></p><p>            -</p><p><code>git rebase -i HEAD~N</code></p><p>            Склеить коммиты, переписав историю с момента HEAD~N, т.е. с того, что было N коммитов назад. -i — означает в интерактивном режиме.</p><p><br></p><p>            23. <b>git stash</b></p><p>            Эта команда используется для сохранения неподтверждённых изменений в отдельном хранилище, чтобы можно было вернуться к ним позже. Сами  файлы возвращаются к исходному состоянию. Команда полезна, когда вы работаете над одной веткой, хотите переключиться</p><p>            на другую, но вы ещё не готовы сделать коммит в текущей ветке. Таким образом, вы прячете изменения в коде, переключаетесь на другую ветку, возвращаетесь к исходной ветке, а затем разархивируете свои изменения.</p><p><code> git stash pop</code> позволяет применить ранее отложенные изменения.</p></article>
</body>
</html>
